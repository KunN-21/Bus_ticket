import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { authAPI } from '../services/api';
import { authService } from '../services/auth';
import type { UserRegister } from '../types';
import './Auth.css';

function Register() {
  const navigate = useNavigate();
  const [step, setStep] = useState<'phone' | 'otp' | 'password'>('phone');
  const [phone, setPhone] = useState('');
  const [otp, setOtp] = useState('');
  const [formData, setFormData] = useState<UserRegister>({
    phone: '',
    full_name: '',
    password: '',
  });
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [otpExpiry, setOtpExpiry] = useState(0);

  // Step 1: Request OTP
  const handleRequestOTP = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const response = await authAPI.requestOTP({ phone });
      setOtpExpiry(response.data.expires_in);
      setStep('otp');
      alert('üì± ' + response.data.message);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Kh√¥ng th·ªÉ g·ª≠i OTP');
    } finally {
      setLoading(false);
    }
  };

  // Step 2: Verify OTP
  const handleVerifyOTP = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await authAPI.verifyOTP({ phone, otp });
      setFormData({ ...formData, phone });
      setStep('password');
    } catch (err: any) {
      setError(err.response?.data?.detail || 'OTP kh√¥ng h·ª£p l·ªá');
    } finally {
      setLoading(false);
    }
  };

  // Step 3: Set password and register
  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (formData.password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }

    if (formData.password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }

    setLoading(true);

    try {
      const response = await authAPI.register(formData);
      authService.setAuth(response.data);
      navigate('/');
    } catch (err: any) {
      setError(err.response?.data?.detail || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-wrapper">
        <div className="auth-left">
          <div className="auth-branding">
            <h1>üé´ BookingTicket</h1>
            <p>H·ªá th·ªëng ƒë·∫∑t v√© xe kh√°ch tr·ª±c tuy·∫øn</p>
          </div>
        </div>

        <div className="auth-right">
          <div className="auth-card">
            <h2>ƒêƒÉng k√Ω t√†i kho·∫£n</h2>
            
            {/* Progress Indicator */}
            <div className="progress-steps">
              <div className={`step ${step === 'phone' ? 'active' : 'completed'}`}>1. S·ªë ƒëi·ªán tho·∫°i</div>
              <div className={`step ${step === 'otp' ? 'active' : step === 'password' ? 'completed' : ''}`}>2. X√°c th·ª±c OTP</div>
              <div className={`step ${step === 'password' ? 'active' : ''}`}>3. ƒê·∫∑t m·∫≠t kh·∫©u</div>
            </div>

            {error && <div className="error-message">{error}</div>}

            {/* Step 1: Phone Number */}
            {step === 'phone' && (
              <form onSubmit={handleRequestOTP}>
                <p className="auth-subtitle">Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n m√£ OTP</p>
                <div className="form-group">
                  <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</label>
                  <input
                    id="phone"
                    type="tel"
                    placeholder="VD: 0912345678"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    required
                    pattern="[0-9]{10,11}"
                  />
                </div>
                <button type="submit" className="btn-primary" disabled={loading}>
                  {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i m√£ OTP'}
                </button>
              </form>
            )}

            {/* Step 2: OTP Verification */}
            {step === 'otp' && (
              <form onSubmit={handleVerifyOTP}>
                <p className="auth-subtitle">Nh·∫≠p m√£ OTP ƒë√£ g·ª≠i ƒë·∫øn {phone}</p>
                <div className="otp-info">
                  <p>‚è±Ô∏è M√£ c√≥ hi·ªáu l·ª±c trong {Math.floor(otpExpiry / 60)} ph√∫t</p>
                  <p className="otp-debug">üí° Ki·ªÉm tra console/terminal ƒë·ªÉ xem m√£ OTP (demo)</p>
                </div>
                <div className="form-group">
                  <label htmlFor="otp">M√£ OTP</label>
                  <input
                    id="otp"
                    type="text"
                    placeholder="Nh·∫≠p 6 s·ªë"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    required
                    pattern="[0-9]{6}"
                    maxLength={6}
                    className="otp-input"
                  />
                </div>
                <button type="submit" className="btn-primary" disabled={loading}>
                  {loading ? 'ƒêang x√°c th·ª±c...' : 'X√°c th·ª±c OTP'}
                </button>
                <button type="button" className="btn-secondary" onClick={() => setStep('phone')}>
                  G·ª≠i l·∫°i OTP
                </button>
              </form>
            )}

            {/* Step 3: Set Password */}
            {step === 'password' && (
              <form onSubmit={handleRegister}>
                <p className="auth-subtitle">Ho√†n t·∫•t ƒëƒÉng k√Ω</p>
                <div className="form-group">
                  <label htmlFor="fullname">H·ªç v√† t√™n</label>
                  <input
                    id="fullname"
                    type="text"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    value={formData.full_name}
                    onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}
                    required
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="password">M·∫≠t kh·∫©u</label>
                  <input
                    id="password"
                    type="password"
                    placeholder="T·ªëi thi·ªÉu 6 k√Ω t·ª±"
                    value={formData.password}
                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                    required
                    minLength={6}
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <input
                    id="confirmPassword"
                    type="password"
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                  />
                </div>

                <button type="submit" className="btn-primary" disabled={loading}>
                  {loading ? 'ƒêang ƒëƒÉng k√Ω...' : 'Ho√†n t·∫•t ƒëƒÉng k√Ω'}
                </button>
              </form>
            )}

            <div className="auth-footer">
              <p>
                ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login">ƒêƒÉng nh·∫≠p</Link>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Register;
