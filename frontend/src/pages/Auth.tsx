import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { authAPI } from '../services/api';
import { authService } from '../services/auth';
import type { UserLogin, UserRegister } from '../types';
import { CheckCircle } from 'lucide-react';
import './Auth.css';

function Auth() {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');
  
  // Login state
  const [loginData, setLoginData] = useState<UserLogin>({
    phone: '',
    password: '',
  });
  
  // Register state
  const [step, setStep] = useState<'phone' | 'otp' | 'password'>('phone');
  const [phone, setPhone] = useState('');
  const [otp, setOtp] = useState('');
  const [registerData, setRegisterData] = useState<UserRegister>({
    phone: '',
    full_name: '',
    password: '',
  });
  const [confirmPassword, setConfirmPassword] = useState('');
  
  // UI state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [otpExpiry, setOtpExpiry] = useState(0);

  // ========== LOGIN HANDLERS ==========
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const response = await authAPI.login(loginData);
      authService.setAuth(response.data);
      navigate('/');
    } catch (err: any) {
      setError(err.response?.data?.detail || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  // ========== REGISTER HANDLERS ==========
  const handleRequestOTP = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    try {
      const response = await authAPI.requestOTP({ phone });
      setOtpExpiry(response.data.expires_in);
      setStep('otp');
      setSuccess('üì± ' + response.data.message);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Kh√¥ng th·ªÉ g·ª≠i OTP');
    } finally {
      setLoading(false);
    }
  };

  const handleVerifyOTP = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    try {
      await authAPI.verifyOTP({ phone, otp });
      setRegisterData({ ...registerData, phone });
      setStep('password');
      setSuccess('‚úÖ OTP x√°c th·ª±c th√†nh c√¥ng!');
    } catch (err: any) {
      setError(err.response?.data?.detail || 'OTP kh√¥ng h·ª£p l·ªá');
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (registerData.password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }

    if (registerData.password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }

    setLoading(true);

    try {
      const response = await authAPI.register(registerData);
      authService.setAuth(response.data);
      navigate('/');
    } catch (err: any) {
      setError(err.response?.data?.detail || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  const resetRegister = () => {
    setStep('phone');
    setPhone('');
    setOtp('');
    setRegisterData({ phone: '', full_name: '', password: '' });
    setConfirmPassword('');
    setError('');
    setSuccess('');
  };

  return (
    <div className="auth-container">
      <div className="auth-wrapper">
        {/* Left Side - Branding */}
        <div className="auth-left">
          <div className="auth-branding">
            <div className="auth-logo">üöå</div>
            <h1>BookingTicket</h1>
            <p>H·ªá th·ªëng ƒë·∫∑t v√© xe kh√°ch h√†ng ƒë·∫ßu Vi·ªát Nam</p>
            
            <div className="auth-features">
              <div className="auth-feature-item">
                <CheckCircle size={20} />
                <span>ƒê·∫∑t v√© nhanh ch√≥ng, ti·ªán l·ª£i</span>
              </div>
              <div className="auth-feature-item">
                <CheckCircle size={20} />
                <span>Thanh to√°n an to√†n b·∫£o m·∫≠t</span>
              </div>
              <div className="auth-feature-item">
                <CheckCircle size={20} />
                <span>H∆°n 100+ tuy·∫øn ƒë∆∞·ªùng</span>
              </div>
              <div className="auth-feature-item">
                <CheckCircle size={20} />
                <span>H·ªó tr·ª£ 24/7</span>
              </div>
            </div>
          </div>
        </div>

        {/* Right Side - Forms */}
        <div className="auth-right">
          <div className="auth-card">
            {/* Tabs */}
            <div className="auth-tabs">
              <button
                className={`auth-tab ${activeTab === 'login' ? 'active' : ''}`}
                onClick={() => {
                  setActiveTab('login');
                  setError('');
                  setSuccess('');
                  resetRegister();
                }}
              >
                ƒêƒÉng nh·∫≠p
              </button>
              <button
                className={`auth-tab ${activeTab === 'register' ? 'active' : ''}`}
                onClick={() => {
                  setActiveTab('register');
                  setError('');
                  setSuccess('');
                  setLoginData({ phone: '', password: '' });
                }}
              >
                ƒêƒÉng k√Ω
              </button>
            </div>

            {/* Messages */}
            {error && <div className="error-message">{error}</div>}
            {success && <div className="success-message">{success}</div>}

            {/* ========== LOGIN FORM ========== */}
            {activeTab === 'login' && (
              <form onSubmit={handleLogin}>
                <p className="auth-subtitle">ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c ƒë·∫∑t v√©</p>

                <div className="form-group">
                  <label htmlFor="login-phone">S·ªë ƒëi·ªán tho·∫°i</label>
                  <input
                    id="login-phone"
                    type="tel"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={loginData.phone}
                    onChange={(e) => setLoginData({ ...loginData, phone: e.target.value })}
                    required
                    pattern="[0-9]{10,11}"
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="login-password">M·∫≠t kh·∫©u</label>
                  <input
                    id="login-password"
                    type="password"
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                    value={loginData.password}
                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
                    required
                  />
                </div>

                <div className="forgot-password">
                  <a href="#forgot">Qu√™n m·∫≠t kh·∫©u?</a>
                </div>

                <button type="submit" className="btn-primary" disabled={loading}>
                  {loading ? 'ƒêang ƒëƒÉng nh·∫≠p...' : 'ƒêƒÉng nh·∫≠p'}
                </button>
              </form>
            )}

            {/* ========== REGISTER FORM ========== */}
            {activeTab === 'register' && (
              <>
                {/* Progress Steps */}
                {step !== 'phone' && (
                  <div className="progress-steps">
                    <div className="step completed" data-step="1">
                      S·ªë ƒëi·ªán tho·∫°i
                    </div>
                    <div className={`step ${step === 'otp' ? 'active' : 'completed'}`} data-step="2">
                      X√°c th·ª±c OTP
                    </div>
                    <div className={`step ${step === 'password' ? 'active' : ''}`} data-step="3">
                      Ho√†n t·∫•t
                    </div>
                  </div>
                )}

                {/* Step 1: Phone */}
                {step === 'phone' && (
                  <form onSubmit={handleRequestOTP}>
                    <p className="auth-subtitle">Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n m√£ OTP</p>
                    <div className="form-group">
                      <label htmlFor="register-phone">S·ªë ƒëi·ªán tho·∫°i</label>
                      <input
                        id="register-phone"
                        type="tel"
                        placeholder="VD: 0912345678"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                        required
                        pattern="[0-9]{10,11}"
                      />
                    </div>
                    <button type="submit" className="btn-primary" disabled={loading}>
                      {loading ? 'ƒêang g·ª≠i...' : 'Nh·∫≠n m√£ OTP'}
                    </button>
                  </form>
                )}

                {/* Step 2: OTP */}
                {step === 'otp' && (
                  <form onSubmit={handleVerifyOTP}>
                    <p className="auth-subtitle">Nh·∫≠p m√£ OTP ƒë√£ g·ª≠i ƒë·∫øn {phone}</p>
                    <div className="otp-info">
                      <p>‚è±Ô∏è M√£ c√≥ hi·ªáu l·ª±c trong {Math.floor(otpExpiry / 60)} ph√∫t</p>
                      <p className="otp-debug">üí° Ki·ªÉm tra console backend ƒë·ªÉ xem m√£ OTP</p>
                    </div>
                    <div className="form-group">
                      <label htmlFor="otp">M√£ OTP</label>
                      <input
                        id="otp"
                        type="text"
                        placeholder="000000"
                        value={otp}
                        onChange={(e) => setOtp(e.target.value)}
                        required
                        pattern="[0-9]{6}"
                        maxLength={6}
                        className="otp-input"
                      />
                    </div>
                    <button type="submit" className="btn-primary" disabled={loading}>
                      {loading ? 'ƒêang x√°c th·ª±c...' : 'X√°c th·ª±c'}
                    </button>
                    <button type="button" className="btn-secondary" onClick={resetRegister}>
                      G·ª≠i l·∫°i m√£
                    </button>
                  </form>
                )}

                {/* Step 3: Password */}
                {step === 'password' && (
                  <form onSubmit={handleRegister}>
                    <p className="auth-subtitle">Ho√†n t·∫•t ƒëƒÉng k√Ω t√†i kho·∫£n</p>
                    <div className="form-group">
                      <label htmlFor="fullname">H·ªç v√† t√™n</label>
                      <input
                        id="fullname"
                        type="text"
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                        value={registerData.full_name}
                        onChange={(e) => setRegisterData({ ...registerData, full_name: e.target.value })}
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label htmlFor="register-password">M·∫≠t kh·∫©u</label>
                      <input
                        id="register-password"
                        type="password"
                        placeholder="T·ªëi thi·ªÉu 6 k√Ω t·ª±"
                        value={registerData.password}
                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}
                        required
                        minLength={6}
                      />
                    </div>

                    <div className="form-group">
                      <label htmlFor="confirm-password">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                      <input
                        id="confirm-password"
                        type="password"
                        placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        required
                      />
                    </div>

                    <button type="submit" className="btn-primary" disabled={loading}>
                      {loading ? 'ƒêang ƒëƒÉng k√Ω...' : 'Ho√†n t·∫•t'}
                    </button>
                  </form>
                )}
              </>
            )}

            {/* Footer */}
            <div className="auth-footer">
              <p>
                B·∫±ng vi·ªác ƒëƒÉng k√Ω, b·∫°n ƒë·ªìng √Ω v·ªõi{' '}
                <a href="#terms">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a> c·ªßa ch√∫ng t√¥i
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Auth;
